The following points are meant to be implemented within the pipeline, 
dustmixer and utils modules ("-" means to be done, "+" means done):

    - [gridder] Find a way to also interpolate SPH vector fields, to be able to use
      the input B or V fields for polarization by dust alignment.

    - [scripter] Receive an angular resolution from the argparser and detect 
      what antenna array best matches this resolution.

    - [amr_reader] Implement interfaces for grid based codes (Athena, ENZO, ...)

    - [analytical] Add the option to plot the vector_field midplane with 
      plt.streamplot and in 3D streamlines using Mayavi.

    - [dustmixer] Interpolate and extrapolate the wavelength ranges within the 
      dustmixer when two materials are mixed or summed. This will also let the
      user to adjust the resolution of the wavelength grid. 

    - [utils.elapsed_time] The hour counter resets after 24hrs, not counting days. 

    + [scripter] When the observing wav. is outside the working range for CASA,
      limit the synthetic obs. to a PSF convolution and addition of thermal noise.

    + [raytrace] Find a way to let the pipeline know what's the current kappa(lam)

    + [synthesizer] conver the whole program into a python package.

    + [pipeline] Rewrite utils.radmc3d_casafits() to be done manually and to 
      eliminate the dependency of radmc3dPy from synthesizer.

    + [raytrace] Add a grid method to generate a 2D optical depth map. Read in 
      the 3D density grid, multiply by the opacity and apply np.cumsum(axis=2)

    + [dustmixer] Handle HTTP 404 Not Found error if the table is not on the repo 
      and use dustmixer by calling Pipeline.dust_opacity(...).
 
    + [Pipeline] Implement a proper CLI APP's layout system using MVC. 
      https://realpython.com/command-line-interfaces-python-argparse/

    + [dustmixer] Let get_efficiencies() return 6 zij instrument instead of an 
      array zscat of dim 6. This might solve the issue with the dimensions when 
      using multiprocessing. 
    
    + [pipeline.raytrace] Catch the return codes or the "ERROR" word in the 
      radmc3d output, to stop the pipeline execution if radmc3d failed.

    + [dustmixer] The g (Henyey-Greenstein) parameter should also be integrated 
      over the size distribution. 

    + [dustmixer] The scattering matrix elements Z_ij should also be integrated 
      over the size distribution. 

    + [dustmixer] The scattering matrix elements are currently higher than they 
      should, which makes the k_sca be way smaller than the integral of Z_11.

    + [utils.radmc3d_data] Read in image.out files containing full stokes info  
      and return the four components as a tuple. NOTE: I used polarization_map()

    + [pipeline.raytrace] Let the plot also consider the case of full stokes, 
      both using matplotlib.imshow and quiver and also writing the components 
      to fits and then call utils.polarization_map(), which uses APLPy.

    + [pipeline.generate_input_files] Don't overwrite the opacity files if they
      were calculated using the dustmixer, only do if they were downloaded. 
      Otherwise, you loose the newly calculated tables which might have taken long. 

